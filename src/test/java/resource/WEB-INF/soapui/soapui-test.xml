<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="4599f3c7-9818-423a-ab36-d4d50afcbbbb" activeEnvironment="Default" name="WeatherAppTEST" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="ServiceTest"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="WarszawaTest"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" id="3b2711f6-d2c2-487f-83e8-7ed1fdad9e8b" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://WW300166:8089/</con:endpoint><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="Param" path="/weather/{param}" id="9c4ed949-3b7d-4f0e-9218-00b0ed700332"><con:settings/><con:parameters><con:parameter><con:name>param</con:name><con:value>param</con:value><con:style>TEMPLATE</con:style><con:default>param</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET" id="337b1ae3-29a6-41f6-b1ca-e24547f834ea" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="getWeather" id="40f228bd-2a39-45e8-b233-5e6acf160e9d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="param" value="param" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>param</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="fbddcc01-db1c-4968-95d6-bb7ed85e8cba" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://api.wunderground.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://WW300166:8089/</con:endpoint><con:endpoint>http://api.wunderground.com</con:endpoint></con:endpoints><con:resource name="Param.xml" path="/api/31c81b32dea6da45/conditions/q/{param}.xml" id="ec4d71d9-ae89-48e1-b872-575cbcda17f4"><con:settings/><con:parameters><con:parameter><con:name>param</con:name><con:value>param</con:value><con:style>TEMPLATE</con:style><con:default>param</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Param.xml 1" id="db529c80-9d78-4fc2-828b-66d3c0573083" method="GET"><con:settings/><con:parameters/><con:request name="getResponseFromWunderground" id="6a96cae9-f4d9-4b31-8a2e-e911b97eba42" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.wunderground.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="param" value="param" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>param</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="2ce14c13-89c7-4e02-b5f9-4528d8646eb1" name="ServiceTest"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="04fc155d-10b9-4e3d-ae56-48ad67e5ddf7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="WarszawaTest" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCityWeather" id="d8edcff7-9298-4bd9-961f-2e0f7956feac"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather/{param}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCityWeather" id="40f228bd-2a39-45e8-b233-5e6acf160e9d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/warszawa</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d32d4dee-6301-49bb-a066-5e64b8ac1e7c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="78858d4c-d820-48b2-84d1-d830084bf437" name="Invalid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="9baebda1-08fa-4494-8aa8-8463bad22e4e" name="XPath Match"><con:configuration><path>//*:location/text()</path><content>Warszawa, Poland</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="param" value="warszawa" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>param</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fd09c10a-9bb6-4149-aabf-f87e6657e646" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MagdeburgTest" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCityWeather" id="47b703d4-29c6-4dba-8e99-6788c910ae8e"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather/{param}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCityWeather" id="40f228bd-2a39-45e8-b233-5e6acf160e9d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/magdeburg</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1415b3f1-8fae-4f72-992d-cc98284ea4b9" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="616e5cd5-7b80-43b1-9f9d-1748d815f315" name="Invalid HTTP Status Codes"><con:configuration><codes>404
</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="348311ec-bc61-4fb8-aeac-39e1d513b1b3" name="XPath Match"><con:configuration><path>//*:location/text()</path><content>Magdeburg, Germany</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="param" value="magdeburg" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>param</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9ed88cec-d5c2-4ec2-906a-328128970177" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BarcelonaTest" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCityWeather" id="81ba6a7a-4bcc-40e9-b04b-95c26b1d0fe6"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather/{param}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCityWeather" id="40f228bd-2a39-45e8-b233-5e6acf160e9d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/barcelona</con:originalUri><con:assertion type="Invalid HTTP Status Codes" id="58eb3ed4-6e1e-42c7-a4bd-07d204dc0521" name="Invalid HTTP Status Codes"><con:configuration><codes>404
</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="476d6cef-8b72-4e23-ab3a-39ae1c4c5238" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="90359897-5ed1-4264-9358-c14db19bae3c" name="XPath Match"><con:configuration><path>//*:location/text()</path><content>Barcelona, Spain</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="param" value="barcelona" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>param</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fa9a2e5e-1544-4521-9a9a-e529655948f0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GdanskTest" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCityWeather" id="7cecc2da-c5be-4973-b1cc-0d37ccb7db2e"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather/{param}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCityWeather" id="40f228bd-2a39-45e8-b233-5e6acf160e9d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/gdansk</con:originalUri><con:assertion type="Invalid HTTP Status Codes" id="22c762e7-577f-4b36-b5f0-76c7e8a46ac7" name="Invalid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="998d3c34-bace-45af-9299-97080fb3fbfa" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="3b0bcfc5-121d-4ebe-998a-f34761c9efda" name="XPath Match"><con:configuration><path>//*:location/text()</path><content>Gdansk, Poland</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="param" value="gdansk" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>param</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9f742bb3-4c08-4f4b-9890-86510371955e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="QuebecTest" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCityWeather" id="5ad8409b-de66-4dfd-a9ce-cfdc63a96e4f"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather/{param}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCityWeather" id="40f228bd-2a39-45e8-b233-5e6acf160e9d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/quebec</con:originalUri><con:assertion type="Invalid HTTP Status Codes" id="1cc8f580-c543-46b7-915b-00c960efc0a8" name="Invalid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="2861e192-982b-4eda-854e-4302fd3b15d2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="667bf745-78ee-49dd-a0fa-bc735eae50da" name="XPath Match"><con:configuration><path>//*:location/text()</path><content>Quebec, Quebec</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="param" value="quebec" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>param</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c3625d0c-2e89-4c44-9106-b4d983938427" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UnsupportedCityTest" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCityWeather" id="c1eca449-442b-44d3-876b-932ac4018c53"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather/{param}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCityWeather" id="40f228bd-2a39-45e8-b233-5e6acf160e9d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/unsupportedcity</con:originalUri><con:assertion type="Invalid HTTP Status Codes" id="8b63f344-34d3-4b52-99be-869ee0fb9bf5" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="fcf2284d-2e0e-4b15-9c4c-2641f4caaa14" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="param" value="unsupportedcity" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>param</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2c1ea0c5-887f-4fc4-be5d-a07c014175c9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AllCitiesWeather" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCitiesWeather" id="e415df2b-db1e-4351-949e-99ecf68b2dbd"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather/{param}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCitiesWeather" id="40f228bd-2a39-45e8-b233-5e6acf160e9d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d4240d9b-3f76-46a2-9d27-9e8eec6cc746" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="6fc4fd72-7cfe-451a-802e-bbf198c7508b" name="Invalid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="122aed46-9937-4c8c-9238-264c7acd04e1" name="XPath Match"><con:configuration><path>count(//*:location)</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XQuery Match" id="00bffb0b-b03d-48ec-931e-9e305299eaa1" name="XQuery Match"><con:configuration><path>&lt;Result>
{
for $x in //*:location
return &lt;location>{$x/text()}&lt;/location>
}
&lt;/Result></path><content><![CDATA[<Result>
<location>Gdansk, Poland</location>
<location>Warszawa, Poland</location>
<location>Magdeburg, Germany</location>
<location>Barcelona, Spain</location>
<location>Quebec, Quebec</location>
</Result>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="param" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>param</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="e08731ff-1c7c-4add-96a5-89118ef6b201" port="8089" path="/" host="WW300166" name="MockWunderground"><con:settings/><con:properties/><con:restMockAction name="Warszawa" method="GET" resourcePath="/q/poland/warszawa.xml" id="08244b16-ef6d-415c-95b9-d26624214941"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="getCityWeather" id="2ea2140e-eef1-405e-8bd5-6f10e2576d66" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<response>
	<version>0.1</version>
	<termsofService>http://www.wunderground.com/weather/api/d/terms.html</termsofService>
	<features>
		<feature>conditions</feature>
	</features>
  <current_observation>
		<image>
		<url>http://icons.wxug.com/graphics/wu2/logo_130x80.png</url>
		<title>Weather Underground</title>
		<link>http://www.wunderground.com</link>
		</image>
		<display_location>
		<full>Warszawa, Poland</full>
		<city>Warszawa</city>
		<state>MZ</state>
		<state_name>Poland</state_name>
		<country>PL</country>
		<country_iso3166>PL</country_iso3166>
		<zip>00000</zip>
		<magic>308</magic>
		<wmo>12375</wmo>
		<latitude>52.16999817</latitude>
		<longitude>21.57999992</longitude>
		<elevation>150.0</elevation>
		</display_location>
		<observation_location>
		<full>Debe Wielkie, Gmina Debe Wielkie, </full>
		<city>Debe Wielkie, Gmina Debe Wielkie</city>
		<state></state>
		<country>PL</country>
		<country_iso3166>PL</country_iso3166>
		<latitude>52.202721</latitude>
		<longitude>21.450546</longitude>
		<elevation>404 ft</elevation>
		</observation_location>
		<estimated>
		</estimated>
		<station_id>IGMINADB2</station_id>
		<observation_time>Last Updated on July 26, 3:43 PM CEST</observation_time>
		<observation_time_rfc822>Wed, 26 Jul 2017 15:43:26 +0200</observation_time_rfc822>
		<observation_epoch>1501076606</observation_epoch>
		<local_time_rfc822>Wed, 26 Jul 2017 15:43:30 +0200</local_time_rfc822>
		<local_epoch>1501076610</local_epoch>
		<local_tz_short>CEST</local_tz_short>
		<local_tz_long>Europe/Warsaw</local_tz_long>
		<local_tz_offset>+0200</local_tz_offset>
		<weather>Partly Cloudy</weather>
		<temperature_string>70.9 F (21.6 C)</temperature_string>
		<temp_f>70.9</temp_f>
		<temp_c>21.6</temp_c>
		<relative_humidity>68%</relative_humidity>
		<wind_string>Calm</wind_string>
		<wind_dir>West</wind_dir>
		<wind_degrees>272</wind_degrees>
		<wind_mph>0.0</wind_mph>
		<wind_gust_mph>0</wind_gust_mph>
		<wind_kph>0.0</wind_kph>
		<wind_gust_kph>0</wind_gust_kph>
		<pressure_mb>1001</pressure_mb>
		<pressure_in>29.56</pressure_in>
		<pressure_trend>-</pressure_trend>
		<dewpoint_string>60 F (16 C)</dewpoint_string>
		<dewpoint_f>60</dewpoint_f>
		<dewpoint_c>16</dewpoint_c>
		<heat_index_string>NA</heat_index_string>
		<heat_index_f>NA</heat_index_f>
		<heat_index_c>NA</heat_index_c>
		<windchill_string>NA</windchill_string>
		<windchill_f>NA</windchill_f>
		<windchill_c>NA</windchill_c>
        <feelslike_string>70.9 F (21.6 C)</feelslike_string>
        <feelslike_f>70.9</feelslike_f>
        <feelslike_c>21.6</feelslike_c>
		<visibility_mi>6.2</visibility_mi>
		<visibility_km>10.0</visibility_km>
		<solarradiation>426</solarradiation>
		<UV>2.0</UV>
		<precip_1hr_string>0.00 in ( 0 mm)</precip_1hr_string>
		<precip_1hr_in>0.00</precip_1hr_in>
		<precip_1hr_metric> 0</precip_1hr_metric>
		<precip_today_string>0.00 in (0 mm)</precip_today_string>
		<precip_today_in>0.00</precip_today_in>
		<precip_today_metric>0</precip_today_metric>
		<icon>partlycloudy</icon>
		<icon_url>http://icons.wxug.com/i/c/k/partlycloudy.gif</icon_url>
		<forecast_url>http://www.wunderground.com/global/stations/12375.html</forecast_url>
        <history_url>http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=IGMINADB2</history_url>
		<ob_url>http://www.wunderground.com/cgi-bin/findweather/getForecast?query=52.202721,21.450546</ob_url>
	</current_observation>   
</response>]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="Magdeburg" method="GET" resourcePath="/q/germany/magdeburg.xml" id="7ec0844f-6cc0-48c7-9712-7afdc26fd858"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="getCityWeather" id="05ef574a-b108-4e0f-a3af-e9ed56847785" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<response>
<version>0.1</version>
<termsofService>
http://www.wunderground.com/weather/api/d/terms.html
</termsofService>
<features>
<feature>conditions</feature>
</features>
<current_observation>
<image>
<url>http://icons.wxug.com/graphics/wu2/logo_130x80.png</url>
<title>Weather Underground</title>
<link>http://www.wunderground.com</link>
</image>
<display_location>
<full>Magdeburg, Germany</full>
<city>Magdeburg</city>
<state>MG</state>
<state_name>Germany</state_name>
<country>DL</country>
<country_iso3166>DE</country_iso3166>
<zip>00000</zip>
<magic>192</magic>
<wmo>10361</wmo>
<latitude>52.13000107</latitude>
<longitude>11.64000034</longitude>
<elevation>42.1</elevation>
</display_location>
<observation_location>
<full>Breiter Weg, Magdeburg,</full>
<city>Breiter Weg, Magdeburg</city>
<state/>
<country>DE</country>
<country_iso3166>DE</country_iso3166>
<latitude>52.133320</latitude>
<longitude>11.636460</longitude>
<elevation>193 ft</elevation>
</observation_location>
<estimated></estimated>
<station_id>IMAGDEBU3</station_id>
<observation_time>Last Updated on July 26, 3:40 PM CEST</observation_time>
<observation_time_rfc822>Wed, 26 Jul 2017 15:40:56 +0200</observation_time_rfc822>
<observation_epoch>1501076456</observation_epoch>
<local_time_rfc822>Wed, 26 Jul 2017 15:48:59 +0200</local_time_rfc822>
<local_epoch>1501076939</local_epoch>
<local_tz_short>CEST</local_tz_short>
<local_tz_long>Europe/Berlin</local_tz_long>
<local_tz_offset>+0200</local_tz_offset>
<weather>Overcast</weather>
<temperature_string>65.8 F (18.8 C)</temperature_string>
<temp_f>65.8</temp_f>
<temp_c>18.8</temp_c>
<relative_humidity>80%</relative_humidity>
<wind_string>From the SE at 1.9 MPH Gusting to 7.5 MPH</wind_string>
<wind_dir>SE</wind_dir>
<wind_degrees>135</wind_degrees>
<wind_mph>1.9</wind_mph>
<wind_gust_mph>7.5</wind_gust_mph>
<wind_kph>3.1</wind_kph>
<wind_gust_kph>12.1</wind_gust_kph>
<pressure_mb>1006.0</pressure_mb>
<pressure_in>29.71</pressure_in>
<pressure_trend>-</pressure_trend>
<dewpoint_string>60 F (15 C)</dewpoint_string>
<dewpoint_f>60</dewpoint_f>
<dewpoint_c>15</dewpoint_c>
<heat_index_string>NA</heat_index_string>
<heat_index_f>NA</heat_index_f>
<heat_index_c>NA</heat_index_c>
<windchill_string>NA</windchill_string>
<windchill_f>NA</windchill_f>
<windchill_c>NA</windchill_c>
<feelslike_string>65.8 F (18.8 C)</feelslike_string>
<feelslike_f>65.8</feelslike_f>
<feelslike_c>18.8</feelslike_c>
<visibility_mi>10</visibility_mi>
<visibility_km>16</visibility_km>
<solarradiation/>
<UV>2</UV>
<precip_1hr_string>-999.00 in ( 0 mm)</precip_1hr_string>
<precip_1hr_in>-999.00</precip_1hr_in>
<precip_1hr_metric>0</precip_1hr_metric>
<precip_today_string>0.00 in (0 mm)</precip_today_string>
<precip_today_in>0.00</precip_today_in>
<precip_today_metric>0</precip_today_metric>
<icon>cloudy</icon>
<icon_url>http://icons.wxug.com/i/c/k/cloudy.gif</icon_url>
<forecast_url>
http://www.wunderground.com/global/stations/10361.html
</forecast_url>
<history_url>
http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=IMAGDEBU3
</history_url>
<ob_url>
http://www.wunderground.com/cgi-bin/findweather/getForecast?query=52.133320,11.636460
</ob_url>
</current_observation>
</response>]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="Barcelona" method="GET" resourcePath="/q/spain/barcelona.xml" id="502b93c3-ada3-47aa-94a4-a3a8bee10633"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="getCityWeather" id="4d1f65fc-9dfa-4b7d-8ec9-596add5956ea" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<response>
<version>0.1</version>
<termsofService>
http://www.wunderground.com/weather/api/d/terms.html
</termsofService>
<features>
<feature>conditions</feature>
</features>
<current_observation>
<image>
<url>http://icons.wxug.com/graphics/wu2/logo_130x80.png</url>
<title>Weather Underground</title>
<link>http://www.wunderground.com</link>
</image>
<display_location>
<full>Barcelona, Spain</full>
<city>Barcelona</city>
<state>B</state>
<state_name>Spain</state_name>
<country>SP</country>
<country_iso3166>ES</country_iso3166>
<zip>00000</zip>
<magic>17</magic>
<wmo>08181</wmo>
<latitude>41.38999939</latitude>
<longitude>2.16000009</longitude>
<elevation>3.0</elevation>
</display_location>
<observation_location>
<full>Barcelona, La Nova Esquerra De L'Eixample, B</full>
<city>Barcelona, La Nova Esquerra De L'Eixample</city>
<state>B</state>
<country>SP</country>
<country_iso3166>ES</country_iso3166>
<latitude>41.384293</latitude>
<longitude>2.155738</longitude>
<elevation>0 ft</elevation>
</observation_location>
<estimated></estimated>
<station_id>IBLANOVA6</station_id>
<observation_time>Last Updated on July 26, 3:47 PM CEST</observation_time>
<observation_time_rfc822>Wed, 26 Jul 2017 15:47:20 +0200</observation_time_rfc822>
<observation_epoch>1501076840</observation_epoch>
<local_time_rfc822>Wed, 26 Jul 2017 15:49:48 +0200</local_time_rfc822>
<local_epoch>1501076988</local_epoch>
<local_tz_short>CEST</local_tz_short>
<local_tz_long>Europe/Madrid</local_tz_long>
<local_tz_offset>+0200</local_tz_offset>
<weather>Clear</weather>
<temperature_string>80.4 F (26.9 C)</temperature_string>
<temp_f>80.4</temp_f>
<temp_c>26.9</temp_c>
<relative_humidity>59%</relative_humidity>
<wind_string>From the NW at 1.2 MPH Gusting to 3.1 MPH</wind_string>
<wind_dir>NW</wind_dir>
<wind_degrees>307</wind_degrees>
<wind_mph>1.2</wind_mph>
<wind_gust_mph>3.1</wind_gust_mph>
<wind_kph>1.9</wind_kph>
<wind_gust_kph>5.0</wind_gust_kph>
<pressure_mb>1014</pressure_mb>
<pressure_in>29.95</pressure_in>
<pressure_trend>0</pressure_trend>
<dewpoint_string>65 F (18 C)</dewpoint_string>
<dewpoint_f>65</dewpoint_f>
<dewpoint_c>18</dewpoint_c>
<heat_index_string>82 F (28 C)</heat_index_string>
<heat_index_f>82</heat_index_f>
<heat_index_c>28</heat_index_c>
<windchill_string>NA</windchill_string>
<windchill_f>NA</windchill_f>
<windchill_c>NA</windchill_c>
<feelslike_string>82 F (28 C)</feelslike_string>
<feelslike_f>82</feelslike_f>
<feelslike_c>28</feelslike_c>
<visibility_mi>6.2</visibility_mi>
<visibility_km>10.0</visibility_km>
<solarradiation/>
<UV>10</UV>
<precip_1hr_string>-999.00 in ( 0 mm)</precip_1hr_string>
<precip_1hr_in>-999.00</precip_1hr_in>
<precip_1hr_metric>0</precip_1hr_metric>
<precip_today_string>-999.00 in (-25375 mm)</precip_today_string>
<precip_today_in>-999.00</precip_today_in>
<precip_today_metric>-25375</precip_today_metric>
<icon>clear</icon>
<icon_url>http://icons.wxug.com/i/c/k/clear.gif</icon_url>
<forecast_url>
http://www.wunderground.com/global/stations/08181.html
</forecast_url>
<history_url>
http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=IBLANOVA6
</history_url>
<ob_url>
http://www.wunderground.com/cgi-bin/findweather/getForecast?query=41.384293,2.155738
</ob_url>
</current_observation>
</response>]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="Quebec" method="GET" resourcePath="/q/canada/quebec.xml" id="04b9fdff-acfc-4a55-9ac5-6eabba72c557"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="getCityWeather" id="2927d4b8-2ef4-4edf-a678-23abdd5eed29" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<response>
<version>0.1</version>
<termsofService>
http://www.wunderground.com/weather/api/d/terms.html
</termsofService>
<features>
<feature>conditions</feature>
</features>
<current_observation>
<image>
<url>http://icons.wxug.com/graphics/wu2/logo_130x80.png</url>
<title>Weather Underground</title>
<link>http://www.wunderground.com</link>
</image>
<display_location>
<full>Quebec, Quebec</full>
<city>Quebec</city>
<state>QC</state>
<state_name>Quebec</state_name>
<country>CA</country>
<country_iso3166>CA</country_iso3166>
<zip>00000</zip>
<magic>5</magic>
<wmo>71578</wmo>
<latitude>46.81000137</latitude>
<longitude>-71.22000122</longitude>
<elevation>68.9</elevation>
</display_location>
<observation_location>
<full>St-sauveur Quebec, Quebec, QC</full>
<city>St-sauveur Quebec, Quebec</city>
<state>QC</state>
<country>CA</country>
<country_iso3166>CA</country_iso3166>
<latitude>46.808052</latitude>
<longitude>-71.236145</longitude>
<elevation>59 ft</elevation>
</observation_location>
<estimated></estimated>
<station_id>IQCQUBEC3</station_id>
<observation_time>Last Updated on July 26, 9:50 AM EDT</observation_time>
<observation_time_rfc822>Wed, 26 Jul 2017 09:50:23 -0400</observation_time_rfc822>
<observation_epoch>1501077023</observation_epoch>
<local_time_rfc822>Wed, 26 Jul 2017 09:50:26 -0400</local_time_rfc822>
<local_epoch>1501077026</local_epoch>
<local_tz_short>EDT</local_tz_short>
<local_tz_long>America/Toronto</local_tz_long>
<local_tz_offset>-0400</local_tz_offset>
<weather>Clear</weather>
<temperature_string>74.5 F (23.6 C)</temperature_string>
<temp_f>74.5</temp_f>
<temp_c>23.6</temp_c>
<relative_humidity>70%</relative_humidity>
<wind_string>From the NW at 7.5 MPH Gusting to 11.4 MPH</wind_string>
<wind_dir>NW</wind_dir>
<wind_degrees>314</wind_degrees>
<wind_mph>7.5</wind_mph>
<wind_gust_mph>11.4</wind_gust_mph>
<wind_kph>12.1</wind_kph>
<wind_gust_kph>18.3</wind_gust_kph>
<pressure_mb>1005.0</pressure_mb>
<pressure_in>29.68</pressure_in>
<pressure_trend>0</pressure_trend>
<dewpoint_string>64 F (18 C)</dewpoint_string>
<dewpoint_f>64</dewpoint_f>
<dewpoint_c>18</dewpoint_c>
<heat_index_string>NA</heat_index_string>
<heat_index_f>NA</heat_index_f>
<heat_index_c>NA</heat_index_c>
<windchill_string>NA</windchill_string>
<windchill_f>NA</windchill_f>
<windchill_c>NA</windchill_c>
<feelslike_string>74.5 F (23.6 C)</feelslike_string>
<feelslike_f>74.5</feelslike_f>
<feelslike_c>23.6</feelslike_c>
<visibility_mi>N/A</visibility_mi>
<visibility_km>N/A</visibility_km>
<solarradiation/>
<UV>-1</UV>
<precip_1hr_string>0.00 in ( 0 mm)</precip_1hr_string>
<precip_1hr_in>0.00</precip_1hr_in>
<precip_1hr_metric>0</precip_1hr_metric>
<precip_today_string>0.00 in (0 mm)</precip_today_string>
<precip_today_in>0.00</precip_today_in>
<precip_today_metric>0</precip_today_metric>
<icon>clear</icon>
<icon_url>http://icons.wxug.com/i/c/k/clear.gif</icon_url>
<forecast_url>
http://www.wunderground.com/global/stations/71578.html
</forecast_url>
<history_url>
http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=IQCQUBEC3
</history_url>
<ob_url>
http://www.wunderground.com/cgi-bin/findweather/getForecast?query=46.808052,-71.236145
</ob_url>
</current_observation>
</response>]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="Gdansk" method="GET" resourcePath="/q/poland/gdansk.xml" id="0bb0d3a0-63dc-461d-9fab-a6bfdb082a96"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="getCityWeather" id="0ca90c6f-9db9-44e7-95a4-f220cf553853" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<response>
<version>0.1</version>
<termsofService>
http://www.wunderground.com/weather/api/d/terms.html
</termsofService>
<features>
<feature>conditions</feature>
</features>
<current_observation>
<image>
<url>http://icons.wxug.com/graphics/wu2/logo_130x80.png</url>
<title>Weather Underground</title>
<link>http://www.wunderground.com</link>
</image>
<display_location>
<full>Gdansk, Poland</full>
<city>Gdansk</city>
<state>PM</state>
<state_name>Poland</state_name>
<country>PL</country>
<country_iso3166>PL</country_iso3166>
<zip>00000</zip>
<magic>141</magic>
<wmo>12140</wmo>
<latitude>54.36000061</latitude>
<longitude>18.63999939</longitude>
<elevation>146.9</elevation>
</display_location>
<observation_location>
<full>Waly Jagiellonskie, Gdansk,</full>
<city>Waly Jagiellonskie, Gdansk</city>
<state/>
<country>PL</country>
<country_iso3166>PL</country_iso3166>
<latitude>54.352024</latitude>
<longitude>18.646639</longitude>
<elevation>26 ft</elevation>
</observation_location>
<estimated></estimated>
<station_id>IGDASK69</station_id>
<observation_time>Last Updated on July 26, 3:45 PM CEST</observation_time>
<observation_time_rfc822>Wed, 26 Jul 2017 15:45:14 +0200</observation_time_rfc822>
<observation_epoch>1501076714</observation_epoch>
<local_time_rfc822>Wed, 26 Jul 2017 15:47:54 +0200</local_time_rfc822>
<local_epoch>1501076874</local_epoch>
<local_tz_short>CEST</local_tz_short>
<local_tz_long>Europe/Warsaw</local_tz_long>
<local_tz_offset>+0200</local_tz_offset>
<weather>Rain</weather>
<temperature_string>65.8 F (18.8 C)</temperature_string>
<temp_f>65.8</temp_f>
<temp_c>18.8</temp_c>
<relative_humidity>98%</relative_humidity>
<wind_string>Calm</wind_string>
<wind_dir>West</wind_dir>
<wind_degrees>270</wind_degrees>
<wind_mph>0.6</wind_mph>
<wind_gust_mph>1.2</wind_gust_mph>
<wind_kph>1.0</wind_kph>
<wind_gust_kph>1.9</wind_gust_kph>
<pressure_mb>999</pressure_mb>
<pressure_in>29.50</pressure_in>
<pressure_trend>0</pressure_trend>
<dewpoint_string>65 F (19 C)</dewpoint_string>
<dewpoint_f>65</dewpoint_f>
<dewpoint_c>19</dewpoint_c>
<heat_index_string>NA</heat_index_string>
<heat_index_f>NA</heat_index_f>
<heat_index_c>NA</heat_index_c>
<windchill_string>NA</windchill_string>
<windchill_f>NA</windchill_f>
<windchill_c>NA</windchill_c>
<feelslike_string>65.8 F (18.8 C)</feelslike_string>
<feelslike_f>65.8</feelslike_f>
<feelslike_c>18.8</feelslike_c>
<visibility_mi>N/A</visibility_mi>
<visibility_km>N/A</visibility_km>
<solarradiation/>
<UV>2</UV>
<precip_1hr_string>-999.00 in ( 0 mm)</precip_1hr_string>
<precip_1hr_in>-999.00</precip_1hr_in>
<precip_1hr_metric>0</precip_1hr_metric>
<precip_today_string>0.00 in (0 mm)</precip_today_string>
<precip_today_in>0.00</precip_today_in>
<precip_today_metric>0</precip_today_metric>
<icon>rain</icon>
<icon_url>http://icons.wxug.com/i/c/k/rain.gif</icon_url>
<forecast_url>
http://www.wunderground.com/global/stations/12140.html
</forecast_url>
<history_url>
http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=IGDASK69
</history_url>
<ob_url>
http://www.wunderground.com/cgi-bin/findweather/getForecast?query=54.352024,18.646639
</ob_url>
</current_observation>
</response>]]></con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>